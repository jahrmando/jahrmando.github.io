<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sysadmin on Blog de Armando</title>
    <link>https://armanroot.com/tags/sysadmin/</link>
    <description>Recent content in sysadmin on Blog de Armando</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-mx</language>
    <copyright>© Armando Uch | Copyright All Rights Reserved</copyright>
    <lastBuildDate>Thu, 15 Apr 2021 16:08:59 -0500</lastBuildDate><atom:link href="https://armanroot.com/tags/sysadmin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Agregar Mimetype WEBP Centos7 a comando File</title>
      <link>https://armanroot.com/posts/2021/agregar-mimetype-webp-centos7-a-comando-file/</link>
      <pubDate>Thu, 15 Apr 2021 16:08:59 -0500</pubDate>
      
      <guid>https://armanroot.com/posts/2021/agregar-mimetype-webp-centos7-a-comando-file/</guid>
      <description>Bueno me topé con que en centos 7 el comando file arrojaba un diferente mimetype a los archivos de imagen WEBP y la reconocia como application/octet-stream que es el default para binarios cuando no encuentra una coincidencia.
Despues de que stackoverflow me falló ya me fui a los manuales de file donde nos dice que podemos agregar nuestros propias reglas para identificar archivos, esto esto en:
$HOME/.magic /etc/magic Revisando en poco el repositorio de mimetypes, encontré una coincidencia para WEBP, de este modo pudé determinar como debe ir mi regla y con el manual el formato final.</description>
    </item>
    
    <item>
      <title>Aplicar un update a VMware ESXi 5</title>
      <link>https://armanroot.com/posts/2017/aplicar-un-update-a-vmware-esxi-5/</link>
      <pubDate>Mon, 20 Feb 2017 10:00:00 -0500</pubDate>
      
      <guid>https://armanroot.com/posts/2017/aplicar-un-update-a-vmware-esxi-5/</guid>
      <description>Aplicar parches a nuestros sistemas ó servicios es parte del dia a dia de un administrador, esta publicacion les mostrara un modo de aplicar parches en su VMWare.
Este proceso se hace por medio de SSH. Se tiene que activar desde el VMware vShepere Client:
Server&amp;gt;Configuration&amp;gt;SecurityProfiles&amp;gt;Services&amp;gt;Properties Apagar todas las maquinas virtuales Antes de entrar a modo de mantenimiento es necesario apagar todas las maquinas virtuales o migrarlos si es posible.</description>
    </item>
    
    <item>
      <title>Sitio Web en Mantenimiento con NGINX</title>
      <link>https://armanroot.com/posts/2015/sitio-web-en-mantenimiento-con-nginx/</link>
      <pubDate>Fri, 27 Mar 2015 10:00:00 -0500</pubDate>
      
      <guid>https://armanroot.com/posts/2015/sitio-web-en-mantenimiento-con-nginx/</guid>
      <description>Crear un estado de “Mantenimiento de sitio” es necesario para mantener informado a nuestros usuarios de lo que acontece con nuestro sitio y no verla completamente offline.
La idea es poder intercambiar rápidamente a un “estado de mantenimiento” de sitio controlado por una sentencia IF.
Todas las configuraciones se hacen dentro de la directiva de configuración server.
Definimos una variable llamada $maintenance que nos servirá para poder controlar el estatus de nuestro sitio.</description>
    </item>
    
    <item>
      <title>Referencia Rápida: systemctl</title>
      <link>https://armanroot.com/posts/2015/referencia-r%C3%A1pida-systemctl/</link>
      <pubDate>Wed, 07 Jan 2015 16:00:00 -0500</pubDate>
      
      <guid>https://armanroot.com/posts/2015/referencia-r%C3%A1pida-systemctl/</guid>
      <description>Este post es mas una ayuda rapida para aquellos que apenas se estan metiendo a usar systemd.
Estado del servicio
$ systemctl status foo.service Iniciar/Detener servicio
$ systemcl [start|stop] foo.service Habilitar/Inhabilitar servicio al inicio del sistema
$ systemctl [enable|disable] foo.service Estado de los servicios que estan ejecutandose
$ systemctl -t service list-units Estado de los servicios que estan instalados (chkconfig --list)
$ systemctl -t service list-unit-files Servicios actualmente ejecutandose
$ systemctl -t service list-units --state running </description>
    </item>
    
    <item>
      <title>Redireccionar el trafico HTTP hacia HTTPS con NGINX</title>
      <link>https://armanroot.com/posts/2014/redireccionar-el-trafico-http-hacia-https-con-nginx/</link>
      <pubDate>Mon, 24 Nov 2014 10:00:00 -0500</pubDate>
      
      <guid>https://armanroot.com/posts/2014/redireccionar-el-trafico-http-hacia-https-con-nginx/</guid>
      <description>Cuando tengamos que mudar un sitio web completamente a protocolo seguro HTTPS necesitamos que toda petición que venga como HTTP y redirigir hacia el protocolo seguro.
Creamos dos instancias server, una para el puerto 80 (http) y otra para el puerto 443 (https).
Para la instancia server del puerto 443 pondremos toda la configuración del sitio y con los debidos ajustes que SSL requiere.
server { listen 443 ssl; server_name example.</description>
    </item>
    
    <item>
      <title>Top 10 IPs mas visitados en Apache / Nginx</title>
      <link>https://armanroot.com/posts/2014/top-10-ips-mas-visitados-en-apache-/-nginx/</link>
      <pubDate>Sat, 16 Aug 2014 10:00:00 -0500</pubDate>
      
      <guid>https://armanroot.com/posts/2014/top-10-ips-mas-visitados-en-apache-/-nginx/</guid>
      <description>Obtener las 10 IPs que mas visitan un sitio web a partir de los registros de acceso de Apache ó NGINX, ademas de listar el numero de accesos encontrados para cada IP.
$ cat site.access.log | awk &amp;#39;{print $1}&amp;#39; | sort | uniq -c | sort -nr | head -n 10 78320 187.xxx.xxx.74 75052 187.xxx.xxx.76 74229 187.xxx.xxx.206 72214 187.xxx.xxx.79 70507 192.168.xxx.200 68457 187.xxx.xxx.123 67956 187.xxx.xxx.207 66438 187.xxx.xxx.78 64883 187.xxx.xxx.201 64874 187.</description>
    </item>
    
    <item>
      <title>Configurando DJANGO stack en CentOS6</title>
      <link>https://armanroot.com/posts/2013/configurando-django-stack-en-centos6/</link>
      <pubDate>Tue, 15 Oct 2013 10:00:00 -0500</pubDate>
      
      <guid>https://armanroot.com/posts/2013/configurando-django-stack-en-centos6/</guid>
      <description>Configuración de Django en CentOS6.x con NGINX, GUNICORN, VIRTUALENV y SUPERVISOR
preinstalacion Instalamos los siguientes paquetes para compilaciones. Es de utilidad en algunos paquetes que instalemos dentro de PIP y los archivos de desarrollo de python.
$ yum install gcc make python-devel pip, virtualenv Instalamos PIP desde los repositorios EPEL
$ yum -y install python-pip --enablerepo epel Instalamos virtualenvwrapper desde PIP, este instalara como dependencia a virtualenv.
$ pip install virtualenvwrapper Creamos nuestras variables de sistema para virtualenv y lo alojamos en el archivo de configuración bash del usuario unix.</description>
    </item>
    
    <item>
      <title>Desactivar la expiración de contraseñas en CentOS</title>
      <link>https://armanroot.com/posts/2013/desactivar-la-expiraci%C3%B3n-de-contrase%C3%B1as-en-centos/</link>
      <pubDate>Thu, 12 Sep 2013 10:54:38 -0500</pubDate>
      
      <guid>https://armanroot.com/posts/2013/desactivar-la-expiraci%C3%B3n-de-contrase%C3%B1as-en-centos/</guid>
      <description>Con la utilidad chage podemos reasignar los valores de expiración.
Verificamos las fechas de expiración de los passwords
$ chage -l usuario Last password change : Jul 23, 2012 Password expires : Sep 21, 2012 Password inactive : Sep 28, 2012 Account expires : never Minimum number of days between password change : 1 Maximum number of days between password change : 60 Number of days of warning before password expires : 7 Tenemos dos modos para poder modificar la expiración:</description>
    </item>
    
    <item>
      <title>Postfix como smarthost, reenvio de emails via CLI</title>
      <link>https://armanroot.com/posts/2012/postfix-como-smarthost-reenvio-de-emails-via-cli/</link>
      <pubDate>Wed, 10 Oct 2012 10:54:38 -0500</pubDate>
      
      <guid>https://armanroot.com/posts/2012/postfix-como-smarthost-reenvio-de-emails-via-cli/</guid>
      <description>Configuremos el servicio postfix para que actué como smarthost y así poder enviar correos desde la terminal.
Instalamos los paquetes necesarios
$ yum install postfix mailx cyrus-sasl cyrus-sasl-plain -y Configuración de credenciales
$ vim /etc/postfix/sasl_passwd smtp.gmail.com user@gmail.com:miPassWord $ postmap hash:/etc/postfix/sasl_passwd Configurando postfix
$ vim /etc/postfix/main.cf ################### # SMARTHOST GMAIL # ################### relayhost = [smtp.gmail.com]:587 smtp_use_tls = yes smtp_sasl_auth_enable = yes smtp_sasl_security_options = noanonymous smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd smtp_tls_CAfile = /etc/ssl/certs/ca-bundle.crt Configurando los servicios:</description>
    </item>
    
    <item>
      <title>Establecer vigencia y reglas sobre contraseñas a usuarios Linux</title>
      <link>https://armanroot.com/posts/2012/establecer-vigencia-y-reglas-sobre-contrase%C3%B1as-a-usuarios-linux/</link>
      <pubDate>Tue, 22 May 2012 10:54:38 -0500</pubDate>
      
      <guid>https://armanroot.com/posts/2012/establecer-vigencia-y-reglas-sobre-contrase%C3%B1as-a-usuarios-linux/</guid>
      <description>Lo que haremos en este post es el establecer una política de seguridad para la renovación de contraseñas de los usuarios en el servidor y también sobre reglas para la creación de las mismas.
Abrimos y editamos el siguiente archivo:
$ vi /etc/login.defs # Controles de vigencia de contraseñas: # # PASS_MAX_DAYS Máximo numero de días que una contraseña debe usarse # PASS_MIN_DAYS Número mínimo de días permitidos entre los cambios de contraseña.</description>
    </item>
    
    <item>
      <title>Asignación de permisos en linux</title>
      <link>https://armanroot.com/posts/2012/asignaci%C3%B3n-de-permisos-en-linux/</link>
      <pubDate>Sun, 08 Apr 2012 10:54:38 -0500</pubDate>
      
      <guid>https://armanroot.com/posts/2012/asignaci%C3%B3n-de-permisos-en-linux/</guid>
      <description>Los permisos se dividen en tres niveles para los directorios o archivos en linux que son:
Propietario - Grupo - Otros A cada nivel de permiso se le tiene asignado un valor numérico.
Lectura (r) = 4 Escritura (w) = 2 Ejecución (x) = 1 Ahora bien para asignar permisos se usa el comando chmod, solo tenemos realmente que sumar los valores de los permisos que queremos darle a cada nivel:</description>
    </item>
    
    <item>
      <title>Montar particiones NTFS automáticamente en Linux</title>
      <link>https://armanroot.com/posts/2011/montar-particiones-ntfs-autom%C3%A1ticamente-en-linux/</link>
      <pubDate>Fri, 25 Mar 2011 10:00:00 -0500</pubDate>
      
      <guid>https://armanroot.com/posts/2011/montar-particiones-ntfs-autom%C3%A1ticamente-en-linux/</guid>
      <description>Esta manera es la manual pero la segura para montar automáticamente las particiones que estén en formato NTFS. Lo primero que haremos es buscar nuestra partición NTFS y encontrar la información que nos servirá.
$ sudo blkid /dev/sda1: UUID=&amp;#34;926c754a-0678-414f-9820-7fcb6a62239c&amp;#34; TYPE=&amp;#34;ext4&amp;#34; /dev/sda2: UUID=&amp;#34;d55e3ab6-46fd-45f4-9755-e5b47a33c45a&amp;#34; TYPE=&amp;#34;swap&amp;#34; /dev/sda3: LABEL=&amp;#34;Documentos&amp;#34; UUID=&amp;#34;7C121D59121D19AA&amp;#34; TYPE=&amp;#34;ntfs&amp;#34; Dos datos nos interesa en esta información que nos arroja, la primera es el LABEL que es el nombre o etiqueta de la partición y la otra es el UUID que es el identificador único de las partición para el sistema.</description>
    </item>
    
  </channel>
</rss>
